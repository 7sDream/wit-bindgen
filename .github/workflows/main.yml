name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        mode: [debug, release]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Install Rust
      run: rustup update stable --no-self-update && rustup default stable
    - name: Install wasm32-wasi target
      run: rustup target add wasm32-wasi
    - if: matrix.mode == 'release'
      name: Test release build
      run: cargo test --workspace --release
    - if: matrix.mode != 'release'
      name: Test debug build
      run: cargo test --workspace

  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Install Rust
      run: rustup update stable && rustup default stable && rustup component add rustfmt
    - name: Format source code
      run: cargo fmt -- --check
    - name: Format test module source code
      run: cd crates/test-modules/modules && cargo fmt -- --check

  demo:
    name: Demo
    runs-on: ubuntu-latest
    env:
      WASMTIME_VERSION: 0.28.0
    steps:
    - uses: actions/checkout@v2
    - name: Download Wasmtime
      run: wget -nv 'https://github.com/bytecodealliance/wasmtime/releases/download/v${{ env.WASMTIME_VERSION }}/wasmtime-v${{ env.WASMTIME_VERSION }}-x86_64-linux.tar.xz' -O /tmp/wasmtime.tar.xz
    - name: Unpack Wasmtime
      run: |
        mkdir /tmp/wasmtime
        tar xvf /tmp/wasmtime.tar.xz --strip-components=1 -C /tmp/wasmtime
    - name: Install Rust
      run: rustup update stable --no-self-update && rustup default stable
    - name: Install cargo-wasi
      run: cargo install cargo-wasi
    - name: Build the markdown component
      run: cargo wasi build --release --manifest-path demo/markdown/Cargo.toml
    - name: Copy the witx file to target directory
      run: cp demo/markdown/markdown.witx demo/markdown/target/wasm32-wasi/release/markdown.witx
    - name: Build the renderer component
      run: cargo wasi build --release --manifest-path demo/renderer/Cargo.toml
    - name: Link the components
      run: cargo run --release -- -i markdown=demo/markdown/target/wasm32-wasi/release/markdown.wasm -p wasmtime -o linked.wasm demo/renderer/target/wasm32-wasi/release/renderer.wasm
    - name: Run the linked component with Wasmtime
      run: printf '# Hello\nworld' | /tmp/wasmtime/wasmtime --enable-module-linking --enable-multi-memory linked.wasm | grep -q '<h1>Hello</h1>'
