// ===========================================
// lists
// ===========================================

list_param: function(a: list<u8>)
list_param2: function(a: string)
list_param3: function(a: list<string>)
list_param4: function(a: list<list<string>>)
list_result: function() -> list<u8>
list_result2: function() -> string
list_result3: function() -> list<string>

list_minmax8: function(a: list<u8>, b: list<s8>) -> (list<u8>, list<s8>)
list_minmax16: function(a: list<u16>, b: list<s16>) -> (list<u16>, list<s16>)
list_minmax32: function(a: list<u32>, b: list<s32>) -> (list<u32>, list<s32>)
list_minmax64: function(a: list<u64>, b: list<s64>) -> (list<u64>, list<s64>)
list_minmax_float: function(a: list<f32>, b: list<f64>) -> (list<f32>, list<f64>)

string_roundtrip: function(a: string) -> string

unaligned_roundtrip1: function(a: list<u16>, b: list<u32>, c: list<u64>, d: list<flag32>, e: list<flag64>)

record unaligned_record { a: u32, b: u64 }
unaligned_roundtrip2: function(a: list<unaligned_record>, b: list<f32>, c: list<f64>, d: list<string>, e: list<list<u8>>)

// ===========================================
// handles
// ===========================================

resource host_state
resource host_state2

host_state_create: function() -> host_state
host_state_get: function(a: host_state) -> u32

host_state2_create: function() -> host_state2
host_state2_saw_close: function() -> bool
two_host_states: function(a: host_state, b: host_state2) -> (host_state, host_state2)

record host_state_param_record { a: host_state2 }
host_state2_param_record: function(a: host_state_param_record)

type host_state_param_tuple = tuple<host_state2>
host_state2_param_tuple: function(a: host_state_param_tuple)

type host_state_param_option = option<host_state2>
host_state2_param_option: function(a: host_state_param_option)

type host_state_param_result = expected<host_state2, u32>
host_state2_param_result: function(a: host_state_param_result)

union host_state_param_variant { host_state2, u32 }
host_state2_param_variant: function(a: host_state_param_variant)

host_state2_param_list: function(a: list<host_state2>)


record host_state_result_record { a: host_state2 }
host_state2_result_record: function() -> host_state_result_record

type host_state_result_tuple = tuple<host_state2>
host_state2_result_tuple: function() -> host_state_result_tuple

type host_state_result_option = option<host_state2>
host_state2_result_option: function() -> host_state_result_option

type host_state_result_result = expected<host_state2, u32>
host_state2_result_result: function() -> host_state_result_result

union host_state_result_variant { host_state2, u32 }
host_state2_result_variant: function() -> host_state_result_variant

host_state2_result_list: function() -> list<host_state2>

resource markdown2 {
  static create: function() -> markdown2
  append: function(buf: string)
  render: function() -> string
}

// ===========================================
// buffers
// ===========================================

buffer_u8: function(a: pull-buffer<u8>, b: push-buffer<u8>) -> u32
buffer_u32: function(a: pull-buffer<u32>, b: push-buffer<u32>) -> u32
buffer_bool: function(a: pull-buffer<bool>, b: push-buffer<bool>) -> u32

/*
(export "buffer_string" (func (param $a (in-buffer string)) (param $b (out-buffer string)) (result $r u32)))
(export "buffer_list_bool" (func (param $a (in-buffer (list bool))) (param $b (out-buffer (list bool))) (result $r u32)))
(export "buffer_buffer_bool" (func (param $a (in-buffer (in-buffer bool)))))
*/

buffer_mutable1: function(a: list<pull-buffer<bool>>)
buffer_mutable2: function(a: list<push-buffer<u8>>) -> u32
buffer_mutable3: function(a: list<push-buffer<bool>>) -> u32

variant buffer_in_variant {
  a(push-buffer<u8>),
  b(pull-buffer<u8>),
  c(push-buffer<bool>),
  d(pull-buffer<bool>),
}

record buffer_in_record {
  a: push-buffer<u8>,
  b: pull-buffer<u8>,
  c: push-buffer<bool>,
  d: pull-buffer<bool>,
  e: buffer_in_variant,
}
buffer_in_record: function(a: buffer_in_record)

type param_in_buffer_u8 = push-buffer<u8>
type param_out_buffer_u8 = pull-buffer<u8>
type param_in_buffer_bool = push-buffer<bool>
type param_out_buffer_bool = pull-buffer<bool>
buffer_typedef: function(a: param_in_buffer_u8, b: param_out_buffer_u8, c: param_in_buffer_bool, d: param_out_buffer_bool)

// ===========================================
// More flavorful types
// ===========================================

record list_in_record1 { a: string }
record list_in_record2 { a: string }
record list_in_record3 { a: string }
record list_in_record4 { a: string }
type list_in_alias = list_in_record4

list_in_record1: function(a: list_in_record1)
list_in_record2: function() -> list_in_record2
list_in_record3: function(a: list_in_record3) -> list_in_record3
list_in_record4: function(a: list_in_alias) -> list_in_alias

type list_in_variant1_1 = option<string>
type list_in_variant1_2 = expected<_, string>
union list_in_variant1_3 { string, f32 }
list_in_variant1: function(a: list_in_variant1_1, b: list_in_variant1_2, c: list_in_variant1_3)

type list_in_variant2 = option<string>
list_in_variant2: function() -> list_in_variant2

type list_in_variant3 = option<string>
list_in_variant3: function(a: list_in_variant3) -> list_in_variant3

enum my_errno { success, a, b }
errno_result: function() -> expected<_, my_errno>

type list_typedef = string
type list_typedef2 = list<u8>
type list_typedef3 = list<string>
list_typedefs: function(a: list_typedef, c: list_typedef3) -> (list_typedef2, list_typedef3)

list_of_variants: function(a: list<bool>, b: list<expected<_, _>>, c: list<my_errno>) -> (list<bool>, list<expected<_, _>>, list<my_errno>)
