// ===========================================
// buffers
// ===========================================

buffer_u8: function(a: pull-buffer<u8>, b: push-buffer<u8>) -> u32
buffer_u32: function(a: pull-buffer<u32>, b: push-buffer<u32>) -> u32
buffer_bool: function(a: pull-buffer<bool>, b: push-buffer<bool>) -> u32

/*
(export "buffer_string" (func (param $a (in-buffer string)) (param $b (out-buffer string)) (result $r u32)))
(export "buffer_list_bool" (func (param $a (in-buffer (list bool))) (param $b (out-buffer (list bool))) (result $r u32)))
(export "buffer_buffer_bool" (func (param $a (in-buffer (in-buffer bool)))))
*/

buffer_mutable1: function(a: list<pull-buffer<bool>>)
buffer_mutable2: function(a: list<push-buffer<u8>>) -> u32
buffer_mutable3: function(a: list<push-buffer<bool>>) -> u32

variant buffer_in_variant {
  a(push-buffer<u8>),
  b(pull-buffer<u8>),
  c(push-buffer<bool>),
  d(pull-buffer<bool>),
}

record buffer_in_record {
  a: push-buffer<u8>,
  b: pull-buffer<u8>,
  c: push-buffer<bool>,
  d: pull-buffer<bool>,
  e: buffer_in_variant,
}
buffer_in_record: function(a: buffer_in_record)

type param_in_buffer_u8 = push-buffer<u8>
type param_out_buffer_u8 = pull-buffer<u8>
type param_in_buffer_bool = push-buffer<bool>
type param_out_buffer_bool = pull-buffer<bool>
buffer_typedef: function(a: param_in_buffer_u8, b: param_out_buffer_u8, c: param_in_buffer_bool, d: param_out_buffer_bool)

// ===========================================
// More flavorful types
// ===========================================

record list_in_record1 { a: string }
record list_in_record2 { a: string }
record list_in_record3 { a: string }
record list_in_record4 { a: string }
type list_in_alias = list_in_record4

list_in_record1: function(a: list_in_record1)
list_in_record2: function() -> list_in_record2
list_in_record3: function(a: list_in_record3) -> list_in_record3
list_in_record4: function(a: list_in_alias) -> list_in_alias

type list_in_variant1_1 = option<string>
type list_in_variant1_2 = expected<_, string>
union list_in_variant1_3 { string, f32 }
list_in_variant1: function(a: list_in_variant1_1, b: list_in_variant1_2, c: list_in_variant1_3)

type list_in_variant2 = option<string>
list_in_variant2: function() -> list_in_variant2

type list_in_variant3 = option<string>
list_in_variant3: function(a: list_in_variant3) -> list_in_variant3

enum my_errno { success, a, b }
errno_result: function() -> expected<_, my_errno>

type list_typedef = string
type list_typedef2 = list<u8>
type list_typedef3 = list<string>
list_typedefs: function(a: list_typedef, c: list_typedef3) -> (list_typedef2, list_typedef3)

list_of_variants: function(a: list<bool>, b: list<expected<_, _>>, c: list<my_errno>) -> (list<bool>, list<expected<_, _>>, list<my_errno>)
